package com.company;

import com.company.Task_1.Task_1;
import com.company.Task_2.Task_2;
import com.company.Task_3.Task_3;
import com.company.Task_4.Task_4;
import com.company.Task_5.Task_5;
import com.company.Task_6.Task_6;
import com.company.Task_7.Task_7;
import com.company.Task_8.Task_8;

public class Main {

    public static void main(String[] args) {
//        /*Task_1
//         Заданы два одномерных массива с различным количеством элементов и натуральное число к.
//         Объединить их в один массив, включив второй массив между к-м и (k+1) - м элементами первого,
//         при этом не используя дополнительный массив.
//         */
//        Task_1 task_1=new Task_1(3,5,1);
//        task_1.setMass_1Mass_2();
//        task_1.copyMass_1InMass_2();
//        task_1.print();
//

        /*Task_2
        Даны две последовательности a1<a=2<=...<=an и b1<=b2<=...<=bm, Образовать из пих повую последовательносп,
        чисел так, чтобы она тоже была неубывающей. Примечание. Дополнительный массив не использовать.
         */
        Task_2 task_2=new Task_2();
        task_2.copyMass();


//
//        /*Task_3
//        Сортировка выбором. Дана последовательность чисел а1<=a2<=...<=an, .Требуется переставить элементы так,
//        чтобы они были расположены по убыванию. Для этого в массиве, начиная с первого, выбирается наибольший
//        элемент и ставится на первое место, а первый - на место наибольшего. Затем, начиная со второго,
//        эта процедура повторяется. Написать алгоритм сортировки выбором.
//         */
//        Task_3 task_3=new Task_3(8);
//        task_3.setMass();
//        task_3.sorting();
//        task_3.print();
//
//
//        /*Task_4
//         Сортировка обменами. Дана последовательность чисел а Sa, <…Sa .Требуется переставить числа в
//         порядке возрастания. Для этого сравниваются два соседних числа а и асли а >а , то делается перестановка.
//         Так продолжается до тех пор, пока все элементы не станут расположены в порядке возрастания.
//         Составить алгоритм сортировки, подсчитывая при этом количества перестановок.
//         */
//        Task_4 task_4=new Task_4(8);
//        task_4.setMass();
//        task_4.sorting();
//        task_4.print();
//
//
//        /*Task_5
//         Сортировка вставками. Дана последовательность чисел а1,а2,...аn . Требуется переставить числа в порядке возрастания.
//         Делается это следующим образом. Пусть а, а,… а, - упорядоченная последовательность, т. е.
//         a1<=a2<=...<=an. Берется следующее число аi+1 и вставляется в последовательность так, чтобы новая
//         последовательность была тоже возрастающей. Процесс производится до тех пор, пока все элементы от i +1 до n
//         не будут перебраны. Примечание. Место помещения очередного элемента в отсортированную часть производить
//         с помощью двоичного поиска. Двоичный поиск оформить в виде отдельной функции.
//         */
//        Task_5 task_5=new Task_5(9);
//        task_5.sorting();
//       System.err.println( task_5.binarySearch(6,0,8));

        /*Task_6

         */
        Task_6 task_6 = new Task_6(9);
        task_6.print();
        task_6.shellSorting();
        task_6.print();


        /*Task 7

         */
        Task_7 task_7 = new Task_7(5, 6);
        task_7.copyMass();


        /*Task 8

         */
        Task_8 task_8=new Task_8();

    }
}
